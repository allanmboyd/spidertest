/**
 * Reporter
 * --------
 *
 * Defines an interface (and abstraction) that should be implemented by SpiderTest Reporter implementations to report
 * on the results of a SpiderTest test run.
 *
 * Reporter instances are provided to a 'spidertest' invocation via command line or file based options. Each Reporter
 * instance will have its callback methods invoked when the reporting phase of SpiderTest kicks in subsequent to
 * completion of all test executions.
 *
 * The reporting phase of SpiderTest iterates over all tests result components in the same way a SAX Parser iterates
 * over all the nodes of an XML document. Test result components consist of: testsuites, testsuite, topic, test,
 * testSuccess, testFailure, testError. These form a hierarchy with testsuites at the root.
 *
 * When a test result component is encountered during the results phase of SpiderTest one or more corresponding
 * callback methods within each provided reporter are invoked. These callback invocations provide the reporter with
 * the means to report on the test results.
 *
 * Each Reporter implementation should extend this Reporter class and override those methods that it needs to perform
 * its required reporting function. There is no requirement to override every method.
 *
 * @class Reporter
 */
var Reporter = function () {};

/**
 * Invoked at the beginning of the reporting phase of SpiderTest. Indicates the start of the reporting phase.
 */
Reporter.prototype.suitesStart = function () {};

/**
 * The final method to be invoked during the reporting phase of SpiderTest. Indicates the end of the reporting phase.
 *
 * @param {Number} testCount the combined total number of tests executed
 * @param {Number} successCount the combined total number of tests that passed
 * @param {Number} failedCount the combined total number of tests that failed
 * @param {Number} errorCount the combined total number of errors that were generated by tests
 * @param {Number} suitesTime the combined total time in seconds that it took to execute tests. (Note that this does not include
 * the time that it takes to obtain responses from a web site - just the time for test execution against the spidered
 * responses.)
 */
Reporter.prototype.suitesEnd = function(testCount, successCount, failedCount, errorCount, suitesTime) {};

/**
 * Invoked when a new test suite is encountered.
 * @param {String} suiteName name of the suite. This is the URL that is associated the the tests within the suite.
 * @param {String} suiteDescription description of the suite. This is available if defined within the test definition.
 * @param {Number} testCount the number of tests in the suite
 * @param {Number} successCount the number of tests that passed in the suite
 * @param {Number} failedCount the number of tests that failed in the suite
 * @param {Number} errorCount the number of tests that generated an error (to be clear this refers to errors during
 * test execution as defined within the tests definitions and not to errors encountered spidering URLs)
 * @param {Number} suiteTime the time in seconds that it took to execute the tests in the test suite. (Note that this does not
 * include the time that it takes to obtain responses from a web site - just the time for test execution against the
 * spidered responses within the suite.)
 */
Reporter.prototype.suiteStart = function(suiteName, suiteDescription, testCount, successCount, failedCount, errorCount, suiteTime) {};

/**
 * Invoked at the end of a testsuite. Merely indicates that a transition to the next suite is about to occur having
 * invoked all the callbacks for all the tests within the current test suite.
 */
Reporter.prototype.suiteEnd = function() {};

/**
 * Invoked for each topic within a test suite. A topic allows several related tests to be grouped together.
 * @param {String} topicName the topic name as defined by the associated test definition
 * @param {String} topicDescription the description of the topic as defined by the associated test definition
 * @param {Number} testCount the number of tests in the topic
 * @param {Number} successCount the number of tests that passed in the topic
 * @param {Number} failedCount the number of tests that failed in the topic
 * @param {Number} errorCount the number of topic tests that generated an error (to be clear this refers to errors during
 * test execution as defined within the tests definitions and not to errors encountered spidering URLs)
 * @param {Number} topicTime the time in seconds that it took to execute the tests in the topic. (Note that this does not
 * include the time that it takes to obtain responses from a web site - just the time for test execution against the
 * spidered responses within the topic.)
 */
Reporter.prototype.topicStart = function(topicName, topicDescription, testCount, successCount, failedCount, errorCount, topicTime) {};


/**
 * Invoked at the end of a topic. Merely indicates that a transition to the next topic is about to occur having
 * invoked all the callbacks for all the tests within the current topic.
 */
Reporter.prototype.topicEnd = function() {};

/**
 * Invoked for each test within a topic.
 * @param {String} testName the name of the test as defined by the associated test definition
 * @param {Number} testTime the time in seconds that it took to execute the test. (Note that this does not
 * include the time that it takes to obtain responses from a web site - just the time for test execution against the
 * spidered response.)
 * @param {String} testFile the name of the file containing the associated test definition from which the test was drawn
 */
Reporter.prototype.testStart = function(testName, testTime, testFile) {};

/**
 * Invoked at the end of a test. Merely indicates that a transition to the next test is about to occur having
 * invoked all the callbacks associated with the current test.
 */
Reporter.prototype.testEnd = function() {};

/**
 * Invoked for each successful test.
 * @param {String} testName the name of the test as defined by the associated test definition
 * @param {Number} testTime the time in seconds that it took to execute the test  (Note that this does not
 * include the time that it takes to obtain responses from a web site - just the time for test execution against the
 * spidered response.)
 * @param {String} testFile the name of the file containing the associated test definition from which the test was drawn
 */
Reporter.prototype.testSuccess = function(testName, testTime, testFile) {};

/**
 * Invoked for each failed test.
 * @param {String} testName the name of the test as defined by the associated test definition
 * @param {Number} testTime the time in seconds that it took to execute the test  (Note that this does not
 * include the time that it takes to obtain responses from a web site - just the time for test execution against the
 * spidered response.)
 * @param {String} testFile the name of the file containing the associated test definition from which the test was drawn
 */
Reporter.prototype.testFailure = function(testName, error, testTime, testFile) {};

/**
 * Invoked for test that resulted in an error (to be clear this refers to errors during
 * test execution as defined within the tests definitions and not to errors encountered spidering URLs)
 * @param {String} testName the name of the test as defined by the associated test definition
 * @param {Number} testTime the time in seconds that it took to execute the test  (Note that this does not
 * include the time that it takes to obtain responses from a web site - just the time for test execution against the
 * spidered response.)
 * @param {String} testFile the name of the file containing the associated test definition from which the test was drawn
 */
Reporter.prototype.testError = function(testName, error, testTime, testFile) {};

/**
 * Reporter implementations should implement this method to return a new instance of their Reporter.
 * @param {String} options to pass into the reporter. It is up to the reporter to determine what to do with these
 * options.
 * @return {Reporter} a new instance of Reporter that would be expected to override at least some of the Reporter
 * prototype methods.
 */
exports.createReporter = function (options) {
    return new Reporter();
};